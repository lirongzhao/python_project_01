# python函数
"""
函数：有一段代码，重复使用到，把这段代码进行一个封装 -- 函数 -- 调用这个函数
作用：提高代码复用率
格式：
define定义
def 函数名():
    函数体(真正实现具体功能的代码)
注意：函数定义完之后没有被调用 不会被调用的
如何调用
函数里面可能会变化的内容，不建议写在函数里面  --参数化
定义参数的类型：
1.必备参数：定义了就必须传入的参数，不传或少传会报错
注意必备参数放在默认参数前面
2.默认参数：如果有些参数有一些大概率情况-- 值==默认值   ===可以不传的 --使用默认值；传入的话，替换默认值
3.不定长的参数：  是个元组
*args等到前面必备参数和默认参数都接收完了，剩下的都会被这个不定长的参数接收，并以元组的格式保存
---多余的参数用的是位置传参会被*不定长参数接收
位置任意，一般不放在开头，会把数据都吞了
# **kwargs:
---多余的参数用的是关键字传参会被**不定长参数接收
一定放到最后
参数传入的方式：
1.位置参数方式：位置的顺序性==传错了位置，参数错了 ==简单，容易出错
2.关键字传参:指定参数名进行传参 --精确不容易出错
3.混合传参：位置传参必须在关键字传参前面
断点调试：
1.开始调试的这行 --断点
2.debug 右上角 爬虫图标
3.点击单步执行 -- 一步一步执行
"""
# 定义函数
print("666")
print("7777")
def good_job(salary,bonus,subsidy = 0, *args, **kwargs):
    # print(args)
    # print(kwargs)
    sum1 = salary + bonus + subsidy
    for num in args:
        sum1 += num
    # 字典的两种遍历方法
    # for i in kwargs.values():
    #     print(i)
    #     sum1 += i
    for i in kwargs:
        print(i)   # 键名
        print(kwargs[i])  # value值
        sum1 += kwargs[i]
    return sum1
    # return sum1,salary  # 定义函数返回值
    print('工资总和是：{}'.format(sum1))
# 调用函数
salary = int(input("工资:"))
bonus = int(input("奖金："))
subsidy = int(input("补贴："))
# 变量接收的的就是函数的返回值
result = good_job(8000, 2000, 800, 111, 222, 333, aa=100, bb=200, cc=300)
print("工资总和：{}".format(result))
if result >= 10000:
    print("好工作")
else:
    print("不是一个好工作")
"""
返回值；函数如果有一个数据需要给到调用这个函数的人去使用的话，把这个数据的变量设置为函数的返回值
1、返回值后面不会被执行的 == 标志着函数的结束
2、返回值可以没有的 --None 有一个，有多个(返回值是元组类型)
"""

